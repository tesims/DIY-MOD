/* DIY-MOD Content Styles - Web Accessible Resource */

/* CSS Variables - These will be overridden by extension settings */
:root {
  --diymod-blur-intensity: 8px;
  --diymod-blur-transition: 0.3s ease;
  --diymod-hover-enabled: 1; /* 1 = enabled, 0 = disabled */
  --diymod-overlay-bg: rgba(0, 0, 0, 0.7);
  --diymod-overlay-color: white;
  --diymod-accent-color: #0077ff;
  --diymod-warning-border: 1px dashed rgb(0, 119, 255);
  /* More reasonable z-index that won't interfere with site navigation */
  --diymod-overlay-z-index: 100;
}

/* Blur effect for filtered content */
.diymod-blur, .blur-text {
  filter: blur(var(--diymod-blur-intensity));
  transition: filter var(--diymod-blur-transition);
}

/* Only apply hover effect when enabled via CSS variable */
@media (hover: hover) {
  .diymod-blur:hover, .blur-text:hover {
    /* Only remove blur if hover is enabled (multiply by 0 keeps blur, by 1 removes it) */
    filter: blur(calc(var(--diymod-blur-intensity) * (1 - var(--diymod-hover-enabled))));
  }
}

/* Overlay for filtered content */
.diymod-overlay, .content-overlay {
  position: relative;
  display: block;
  width: 100%;
  cursor: pointer;
}

/* Support both implementations of overlay */
.diymod-overlay::before, .content-overlay::before {
  content: attr(data-warning);
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--diymod-overlay-bg);
  color: var(--diymod-overlay-color);
  display: flex;
  align-items: center;
  justify-content: center;
  /* Using the variable for z-index */
  z-index: var(--diymod-overlay-z-index);
  text-align: center;
  padding: 20px;
  border-radius: 4px;
}

/* Only show hover effect for overlays if hover is enabled */
.diymod-overlay:hover::before, .content-overlay:hover::before {
  display: calc(var(--diymod-hover-enabled) * 0 + (1 - var(--diymod-hover-enabled)) * 1) !important;
  /* When hover is enabled (1), this evaluates to display: 0 (none)
     When hover is disabled (0), this evaluates to display: 1 (initial) */
}

/* Support for original overlay implementation with .warning element */
.content-overlay .warning {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(0, 0, 0, 0.85);
  color: white;
  padding: 8px;
  border-radius: 4px;
  font-size: 0.9em;
  /* Using the variable for z-index */
  z-index: var(--diymod-overlay-z-index);
  text-align: center;
  white-space: normal;
  line-height: 1.4;
  border: 1px dashed rgb(0, 119, 255);
}

.content-overlay.hidden .warning {
  display: none;
}

.content-overlay .content {
  position: relative;
  z-index: 1;
  width: 100%;
}

/* -- COMPLETE OVERHAUL OF REWRITTEN CONTENT STYLING -- */

/* Base styles for all rewritten content without indicator */
.diymod-rewritten, .rewritten-content {
  position: relative;
  padding: 8px;
  border-radius: 8px;
  margin-top: 20px;
}

/* Only apply full styling to rewritten content elements 
   that don't have a modification-indicator child */
.rewritten-content:not(:has(.modification-indicator)) {
  /* border-left: 3px solid #0077ff; */
  /* border: 1px dashed #ffd700; */
}

/* Only add the ::after pseudo-element for older implementation
   and only when there's no modification-indicator */
.rewritten-content:not(:has(.modification-indicator)):not(.diymod-rewritten)::after {
  /* content: "Modified"; */
  position: absolute;
  top: -10px;
  right: 10px;
  background: rgba(0, 119, 255, 0.8);
  color: white;
  padding: 2px 6px;
  font-size: 10px;
  border-radius: 3px;
}

/* Remove all additional styling when the modification-indicator is present */
.diymod-rewritten .modification-indicator ~ *::after,
.rewritten-content .modification-indicator ~ *::after {
  display: none !important;
}

/* Support the inline modification indicator */
.modification-indicator {
  position: absolute;
  top: -18px;
  right: 10px;
  background: rgba(9, 116, 246, 0.94);
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 12px;
  color: #ffffff;
  border: 1px solid #ddd;
  /* Slightly higher z-index than content but lower than site navigation */
  z-index: var(--diymod-overlay-z-index);
}

/* Platform-specific styles */
.reddit-post-modified {
  position: relative;
}

.twitter-tweet-modified {
  position: relative;
}

/* Processing indicator */
.diymod-processing {
  opacity: 0.5;
  pointer-events: none;
  position: relative;
  filter: blur(3px);
  transition: filter 0.3s ease;
}

.diymod-processing::after {
  content: "Processing...";
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: rgba(0, 0, 0, 0.6);
  color: white;
  padding: 8px 16px;
  border-radius: 4px;
  font-size: 14px;
  /* Using a reasonable z-index */
  z-index: var(--diymod-overlay-z-index);
}

/* --- Loading indicator for deferred image processing --- */
.diymod-loading-indicator {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 1rem;
  border-radius: 4px;
  text-align: center;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.diymod-loading-indicator .loading-spinner {
  border: 4px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top: 4px solid var(--diymod-accent-color, #0077ff);
  width: 30px;
  height: 30px;
  animation: diymod-spin 1s linear infinite;
  margin-bottom: 0.5rem;
}

.diymod-loading-indicator .loading-text {
  font-size: 14px;
  margin-top: 8px;
}

@keyframes diymod-spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Style for cartoonish processed images */
.diymod-cartoonish-processed {
  transition: transform 0.3s ease;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  border-radius: 4px;
}

.diymod-cartoonish-processed:hover {
  transform: scale(1.02);
}